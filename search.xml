<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Fedora使用GPU进行深度学习</title>
      <link href="/2019/05/26/Fedora%E4%BD%BF%E7%94%A8GPU%E8%BF%9B%E8%A1%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/05/26/Fedora%E4%BD%BF%E7%94%A8GPU%E8%BF%9B%E8%A1%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><table><thead><tr><th style="text-align:center"><strong>内容</strong></th><th style="text-align:center"><strong>版本</strong></th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td style="text-align:center">i7-8700</td></tr><tr><td style="text-align:center">显卡</td><td style="text-align:center">GeForce RTX2070/PCIe/SSE2</td></tr><tr><td style="text-align:center">Fedora</td><td style="text-align:center">64位30版本</td></tr><tr><td style="text-align:center">Python</td><td style="text-align:center">3.5.4</td></tr><tr><td style="text-align:center">CUDA</td><td style="text-align:center">9.0</td></tr><tr><td style="text-align:center">cuDNN</td><td style="text-align:center">7.4.2</td></tr><tr><td style="text-align:center">Tensorflow</td><td style="text-align:center">1.12.0</td></tr></tbody></table><h2 id="安装Nvidia驱动"><a href="#安装Nvidia驱动" class="headerlink" title="安装Nvidia驱动"></a>安装Nvidia驱动</h2><h3 id="安装Fedora"><a href="#安装Fedora" class="headerlink" title="安装Fedora"></a>安装Fedora</h3><p>Fedora系统安装步骤可以看<a href="https://dengquanxin.github.io/2019/05/17/Fedora%E9%87%8D%E8%A3%85%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">Fedora重装记录</a>。</p><p>在安装Fedora时，由于<strong>未安装NVIDIA驱动</strong>(也可能是电脑未启用集显的原因)，所以在通过U盘启动的系统会很卡。</p><p>解决办法：1、痛并快乐着享受卡顿安装的过程；2、或者使用集显试试(万一行了呢)。</p><h3 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h3><p>同时安装好的系统由于<strong>未安装nvidia驱动</strong>，也会造成图形界面会很卡，驱动安装好就行了。</p><h4 id="使用软件商店安装"><a href="#使用软件商店安装" class="headerlink" title="使用软件商店安装"></a>使用软件商店安装</h4><ol><li>打开<strong>软件商店</strong></li><li>选择<strong>软件源</strong></li><li>启用<strong>RPM Fusion for Fedora 30-Nonfree-NVIDIA Driver</strong>软件源</li><li><strong>注销</strong>或<strong>重启</strong></li><li>打开软件商店，选择<strong>附加组件</strong></li><li>选择<strong>硬件驱动</strong>，安装<strong>NVIDIA Linux Graphics Driver</strong></li><li><strong>重启</strong></li></ol><h4 id="使用dnf安装"><a href="#使用dnf安装" class="headerlink" title="使用dnf安装"></a>使用dnf安装</h4><ol><li>安装好系统<strong>首次</strong>启动，先进入系统完成<strong>账户创建</strong>，然后<strong>重启</strong>或<strong>登录</strong></li><li>在<strong>登录界面</strong>，使用<code>ctrl+alt+f2</code>组合键进入命令行</li><li>以下安装步骤参考<a href="https://docs.fedoraproject.org/en-US/quick-docs/bumblebee/index.html" target="_blank" rel="noopener">Fedora文档-NVIDIA Optimus Bumblebee</a></li><li><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install fedora-workstation-repositories</span><br><span class="line">sudo dnf config-manager rpmfusion-nonfree-nvidia-driver --<span class="built_in">set</span>-enabled</span><br><span class="line">sudo dnf install akmod-nvidia acpi</span><br><span class="line">reboot  <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h2><p>进入<a href="https://developer.nvidia.com/cuda-90-download-archive" target="_blank" rel="noopener">CUDA下载</a>，选择对应的操作系统(Fedora30<strong>向下兼容</strong>)，选择<strong>rpm(network)</strong>(如果<strong>dnf下载</strong>速度快)或者<strong>rpm(local)</strong>(如果<strong>网络下载</strong>速度快)</p><p>打开终端，运行以下命令安装CUDA：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads</span><br><span class="line">sudo rpm -i cuda-repo-fedora25-9.0.176-1.x86_64.rpm  <span class="comment"># 使用rpm(network)</span></span><br><span class="line">sudo rpm -i cuda-repo-fedora25-9-0-local-9.0.176-1.x86_64.rpm  <span class="comment"># 使用rpm(local)</span></span><br><span class="line">sudo dnf clean all</span><br><span class="line">sudo dnf install cuda-libraries-9-0</span><br></pre></td></tr></table></figure><blockquote><p><strong><em>Note:</em></strong> <em>replace “cuda” with the “cuda-libraries-9-0” meta package.</em><br>需要将官网install命令的cuda替换成cuda-libraries-9-0，不然会安装cuda9.1</p></blockquote><p>之后配置环境变量，<code>vi ~/.bashrc</code>(若使用zsh则<code>vi ~/.zshrc</code>)，在文件末尾添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># path for cuda</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=:/usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/<span class="built_in">local</span>/cuda</span><br><span class="line"><span class="built_in">export</span> CPLUS_INCLUDE_PATH=:/usr/<span class="built_in">local</span>/cuda/samples/common/inc</span><br></pre></td></tr></table></figure><p>保存后，需要创建一个<code>cuda</code>到<code>cuda-9.0</code>的软连接，以便于<strong>多版本CUDA切换</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -f /usr/<span class="built_in">local</span>/cuda</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/cuda-9.0 /usr/<span class="built_in">local</span>/cuda</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc  <span class="comment"># 使得环境变量立即生效</span></span><br></pre></td></tr></table></figure><h2 id="安装cuDNN"><a href="#安装cuDNN" class="headerlink" title="安装cuDNN"></a>安装cuDNN</h2><p>进入<a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">cudnn下载</a>，对应cuda版本的cudnn下载。本文使用版本为7.4.2（因为<strong>比较顺口</strong>），下载<code>cuDNN Library for Linux</code></p><blockquote><p><strong><em>Note:</em></strong> 下载需要登录，创建一个就行了</p></blockquote><p>下载完成后，打开终端，运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads</span><br><span class="line">tar -xvf cudnn-9.0-linux-x64-v7.tgz</span><br><span class="line"><span class="built_in">cd</span> cudnn-9.0-linux-x64-v7</span><br><span class="line">sudo cp cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/include/</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/<span class="built_in">local</span>/cuda/lib64/</span><br><span class="line">sudo chmod a+r /usr/<span class="built_in">local</span>/cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure><p>创建软链接，便于以后切换不同的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/lib64/</span><br><span class="line">sudo ln -s libcudnn.so.7.4.2 libcudnn.so.7</span><br><span class="line">sudo ln -s libcudnn.so.7 libcudnn.so</span><br></pre></td></tr></table></figure><h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><p><code>Fedora30</code>自带<code>Python3.7</code>，发现安装不了<code>tensorflow-1.12.0</code>，需要降低版本。因此使用<code>pyEnv</code>来实现<strong>多版本python共存</strong>。</p><p>安装pyenv：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure><p>之后配置环境变量，<code>vi ~/.bashrc</code>，若使用zsh则<code>vi ~/.zshrc</code>，在文件末尾添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load pyenv automatically by adding</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/&#123;USERNAME_OF_YOU&#125;/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure><p>使环境变量生效，并更新pyenv:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc  <span class="comment"># 使得环境变量立即生效</span></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">pyenv update</span><br></pre></td></tr></table></figure><blockquote><p><strong><em>NOTE:</em></strong> 如果需要使用<code>matplotlib</code>库，需要使用<code>sudo dnf install python3-tkinter tk-devel</code>提前安装<code>tkinter</code></p></blockquote><p>安装指定版本python，并设置为shell使用版本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.5.4</span><br><span class="line">pyenv shell 3.5.4</span><br></pre></td></tr></table></figure><p>可以通过将<code>pyenv shell 3.5.4</code>命令添加到<code>.bashrc</code>或<code>.zshrc</code>中，使其成为命令行默认python版本（这个做法感觉<strong>有点暴力</strong>，可能有更好的做法？）</p><p>安装指定版本tensorflow-gpu：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U --pre tensorflow-gpu==1.12.0</span><br></pre></td></tr></table></figure><p>安装完成后在python命令行，<code>import tensorflow</code>试试是否安装成功</p><h2 id="一些问题以及解决"><a href="#一些问题以及解决" class="headerlink" title="一些问题以及解决"></a>一些问题以及解决</h2><p>1、遇到<code>CUDNN_STATUS_INTERNAL_ENRROR</code>错误？<br><strong><em>解决</em></strong>：万能三步，清除缓存试试<code>rm -rf ~/.nv</code>？重启试试？重装cudnn试试？</p><p>2、发现keras一个程序就占用了所有显存？<br><strong><em>解决</em></strong>：参考<a href="https://www.cnblogs.com/to-creat/p/8094174.html" target="_blank" rel="noopener">keras设置GPU使用率</a>，在python文件中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> keras.backend.tensorflow_backend <span class="keyword">import</span> set_session</span><br><span class="line"></span><br><span class="line">config = tf.ConfigProto()</span><br><span class="line">config.gpu_options.allocator_type = <span class="string">'BFC'</span></span><br><span class="line">config.gpu_options.per_process_gpu_memory_fraction = <span class="number">0.3</span></span><br><span class="line">config.gpu_options.allow_growth = <span class="literal">True</span></span><br><span class="line">set_session(tf.Session(config=config))</span><br></pre></td></tr></table></figure><p>3、发现没有<code>nvidia-smi</code>命令？<br><strong><em>解决</em></strong>：<code>sudo dnf install xorg-x11-drv-nvidia-cuda</code>，可以顺便安装<code>pip install gpustat</code>更方便地查看GPU状态</p>]]></content>
      
      
      
        <tags>
            
            <tag> Fedora </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2019/05/17/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/05/17/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="git三步提交操作"><a href="#git三步提交操作" class="headerlink" title="git三步提交操作"></a>git三步提交操作</h3><p><code>git add [文件名]</code></p><p><code>git commit -m&quot;[描述]&quot;</code></p><p><code>git push origin [本地分支名]:[远程分支名]</code></p><h3 id="git创建新分支"><a href="#git创建新分支" class="headerlink" title="git创建新分支"></a>git创建新分支</h3><p>查看当前分支：<code>git branch</code></p><p>创建并切换：<code>git checkout -b [分支名]</code></p><p>推送新分支到远程：<code>git push origin [分支名]</code></p><p>切换分支：<code>git checkout [分支名]</code></p><h3 id="git删除操作"><a href="#git删除操作" class="headerlink" title="git删除操作"></a>git删除操作</h3><p>删除分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete [分支名]</span><br></pre></td></tr></table></figure><p>删除版本库文件(保留本地)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached file</span><br></pre></td></tr></table></figure><p>删除版本库文件夹(保留本地)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached -r directory</span><br></pre></td></tr></table></figure><h3 id="git合并操作"><a href="#git合并操作" class="headerlink" title="git合并操作"></a>git合并操作</h3><p>更新本地：<code>git pull</code></p><p>合并前对比：<code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></p><p>合并分支到当前分支：<code>git merge [分支名]</code></p><h3 id="git撤销操作"><a href="#git撤销操作" class="headerlink" title="git撤销操作"></a>git撤销操作</h3><p>查看commit_id：<code>git log</code></p><p>回退到某个commit并保存之前的修改：<code>git reset --soft &lt;commit_id&gt;</code></p><p>回退到某个commit并保存之前的修改：<code>git reset --hard &lt;commit_id&gt;</code></p><h3 id="git上传本地已有项目"><a href="#git上传本地已有项目" class="headerlink" title="git上传本地已有项目"></a>git上传本地已有项目</h3><ol><li><code>git init</code></li><li><code>git add .</code></li><li><code>git commit -m &#39;first commit&#39;</code></li><li><code>git remote add origin 你的远程库地址</code> 如 <code>git remote add origin https://github.com/DENGQUANXIN/helloworld.git</code></li><li><code>git pull --rebase origin master</code></li><li><code>git push -u origin master</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell常用命令</title>
      <link href="/2019/05/17/shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/05/17/shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>显示所有进程信息： <code>ps -A</code></p><p>显示指定用户信息： <code>ps -u [用户名]</code></p><p>显示所有进程信息，包括命令行： <code>ps -ef</code></p><p>ps组合grep： <code>ps -ef | grep [条件]</code></p><p>列出正在内存中的程序： <code>ps aux</code></p><p>列出类似程序树的程序显示：<code>ps -axjf</code></p><h3 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h3><p>增加定时命令：<code>crontab -e</code></p><p>定时命令格式：<code>crontab -e [分钟][小时][日期][月份][星期] [需要执行的命令]</code></p><p>(其中*表示任意，数字对应相应的单位)</p><p>示例(每天12点运行test.sh脚本)：<code>0 12 * * * sh test.sh</code></p><p>查看定时命令列表：<code>crontab -l</code></p><h3 id="mutt"><a href="#mutt" class="headerlink" title="mutt"></a>mutt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"邮件内容123456"</span> | mutt -s <span class="string">"邮件标题测试邮件"</span>   -a /scripts/test.txt  <span class="built_in">test</span>@126.com</span><br></pre></td></tr></table></figure><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><ol><li>-a ：将 binary 文件以 text 文件的方式搜寻数据</li><li>-c ：计算找到 ‘搜寻字符串’ 的次数</li><li>-i ：忽略大小写的不同，所以大小写视为相同</li><li>-n ：顺便输出行号</li><li>-v ：反向选择，亦即显示出没有 ‘搜寻字符串’ 内容的那一行</li><li>—color=auto ：可以将找到的关键词部分加上颜色的显示</li></ol><p>单字符匹配：<code>[字符范围]</code></p><p>单字符字符反向选择：<code>[^字符范围]</code></p><p>行首：<code>^需匹配字符</code></p><p>行尾：<code>需匹配字符$</code></p><p>任意一个字符：<code>.</code></p><p>重复0个或多个之前的字符：<code>需重复字符*</code></p><p>限定重复之前字符次数：<code>需重复字符\{次数\}</code></p><p>全目录查找字符串：<code>grep -R &quot;字符串&quot; [目录]</code></p><h3 id="comm"><a href="#comm" class="headerlink" title="comm"></a>comm</h3><ul><li>-1：不显示在第一个文件出现的内容；</li><li>-2：不显示在第二个文件中出现的内容；</li><li>-3：不显示同时在两个文件中都出现的内容。</li></ul><p>交集：<code>comm aaa.txt bbb.txt -1 -2</code></p><p>非交集：<code>comm aaa.txt bbb.txt -3 | sed &#39;s/^\t//&#39;</code></p><p>差集：<code>comm aaa.txt bbb.txt -2 -3</code></p><p>差集：<code>comm aaa.txt bbb.txt -1 -3</code></p><h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><ul><li>-c或—count: 在每列旁边显示该行重复出现的次数。</li><li>-d或—repeated: 仅显示重复出现的行列。</li><li>-f&lt;栏位&gt;或—skip-fields=&lt;栏位&gt;: 忽略比较指定的栏位。</li><li>-s&lt;字符位置&gt;或—skip-chars=&lt;字符位置&gt;: 忽略比较指定的字符。</li><li>-u或—unique: 仅显示出一次的行列。</li><li>-w&lt;字符位置&gt;或—check-chars=&lt;字符位置&gt;: 指定要比较的字符。</li></ul><h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><p>不间断运行：<code>nohup /root/start.sh &amp;</code></p><h3 id="cd"><a href="#cd" class="headerlink" title="cd -"></a>cd -</h3><p>进行两个目录之间的切换。</p><h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h3><p>统计文件行数。</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="查看磁盘空间"><a href="#查看磁盘空间" class="headerlink" title="查看磁盘空间"></a>查看磁盘空间</h3><p><code>df -lh</code>：整个磁盘空间</p><p><code>du --max-depth=1 -h</code>：目录文件磁盘占用</p><p><code>du -sh</code>：同上</p><p><code>du -h --max-depth=0</code>：同上</p><p><code>du -sh /root/sw</code>：可以指定目录，作用同上</p><h3 id="tmpfs内存文件挂载和使用"><a href="#tmpfs内存文件挂载和使用" class="headerlink" title="tmpfs内存文件挂载和使用"></a>tmpfs内存文件挂载和使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tmpfs /tmp      tmpfs</span><br><span class="line">defaults,nodev,nosuid,mode=1777                 0 0</span><br><span class="line">tmpfs /var/lock tmpfs defaults,nodev,nosuid,noexec,mode=1777,size=10m 0 0</span><br><span class="line">tmpfs /var/run  tmpfs defaults,nodev,nosuid,noexec,mode=0755,size=10m 0 0</span><br></pre></td></tr></table></figure><h3 id="双系统下为fedora扩展home目录分区大小"><a href="#双系统下为fedora扩展home目录分区大小" class="headerlink" title="双系统下为fedora扩展home目录分区大小"></a>双系统下为fedora扩展home目录分区大小</h3><ol><li>在windows下磁盘管理中，压缩可以腾出空间的盘，分出空闲的磁盘空间；</li><li>（以下都需要sudo）在fedora命令行中使用fdisk -l可以查看当前的磁盘分配情况；</li><li>输入<code>fdisk /dev/sda</code>；</li><li>输入n，新建分区；</li><li>输入分区号，回车默认就好（此处以12为例，根据实际情况调整）；</li><li>输入起始柱面，回车默认就好；</li><li>输入结束柱面，回车默认就好（默认即为分配所有剩余空间）；</li><li>输入w，保存更改；</li><li><code>reboot</code>，重启主机；</li><li>重启完成后，<code>pvcreate /dev/sda12</code>、<code>vgextend fedora /dev/sda12</code>（其中12与步骤5中对应）；</li><li><code>vgdisplay fedora</code>，记下Free PE数</li><li><code>lvextend -l +[Free PE数] /dev/fedora/home</code>，其中最后的路径根据实际情况修改;</li><li><code>resize2fs /dev/fedora/root</code>，扩展home挂载点；</li><li><code>df -h</code>，查看文件系统情况。</li></ol><h3 id="删除fedora旧内核"><a href="#删除fedora旧内核" class="headerlink" title="删除fedora旧内核"></a>删除fedora旧内核</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep kernel <span class="comment">#查看系统中所存在的kernel</span></span><br><span class="line">uname -r <span class="comment">#查看当前使用kernel</span></span><br><span class="line">sudo yum remove kernel-*-4.8.6-300.fc25.x86_64 <span class="comment">#删除旧版本内核</span></span><br><span class="line">sudo grub2-mkconfig -o /boot/grub2/grub.cfg <span class="comment">#生成启动项列表</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker+Hadoop+Spark简单环境搭建</title>
      <link href="/2019/05/17/Docker%E3%80%81Hadoop%E3%80%81Spark/"/>
      <url>/2019/05/17/Docker%E3%80%81Hadoop%E3%80%81Spark/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ol><li><p>Fedora安装Docker</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf -y install dnf-plugins-core</span><br><span class="line">sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo</span><br><span class="line">sudo dnf install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动Docker服务：<code>service docker start</code></p></li><li><p><a href="https://hub.docker.com/r/nusbigdatacs4225/ubuntu-with-hadoop-spark" target="_blank" rel="noopener">新国大Docker镜像</a>，配置为：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- ubuntu</span><br><span class="line">- jdk 1.8.0_191 (/usr/java)</span><br><span class="line">- Hadoop 2.8.5 (/usr/local/hadoop)</span><br><span class="line">- Spark 2.2.0 (/usr/local/spark)</span><br></pre></td></tr></table></figure></li><li><p>创建containers</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -h master --name master nusbigdatacs4225/ubuntu-with-hadoop-spark</span><br><span class="line">docker run -it -h slave01 --name slave01 nusbigdatacs4225/ubuntu-with-hadoop-spark</span><br><span class="line">docker run -it -h slave02 --name slave02 nusbigdatacs4225/ubuntu-with-hadoop-spark</span><br></pre></td></tr></table></figure></li><li><p>退出container：<code>exit</code></p></li><li>查看containers：<code>sudo docker ps [-a]</code></li><li>重启container：<code>sudo docker container start [name]</code></li><li>进入container命令行：<code>sudo docker attach [name]</code></li></ol><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><ol><li><p>查看三个容器各自的ip，如：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master: 172.17.0.2</span><br><span class="line">slave01:172.17.0.3</span><br><span class="line">slave02:172.17.0.4</span><br></pre></td></tr></table></figure></li><li><p>将对应ip填入<code>/etc/hosts</code>配置中：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"><span class="comment"># 在文件最后增加</span></span><br><span class="line">172.17.0.2    master</span><br><span class="line">172.17.0.3    slave01</span><br><span class="line">172.17.0.4    slave02</span><br></pre></td></tr></table></figure></li><li><p><code>vi /usr/local/hadoop/etc/hadoop/slaves</code>，增加<code>slave01 slave02</code></p></li><li><p>初始化hdfs并且运行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/hadoop</span><br><span class="line">bin/hdfs namenode-format</span><br><span class="line">sbin/start-all.sh</span><br></pre></td></tr></table></figure></li><li><p>hdfs命令：<code>/usr/local/hadoop/bin/hdfs dfs -[命令] [参数]</code></p></li><li>停止hdfs：<code>/usr/local/hadoop/sbin/stop-all.sh</code></li><li>查看运行：<code>jps</code></li></ol><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><ol><li><p><code>vi /usr/local/spark/conf/spark-env.sh</code>，配置hadoop与Java路径：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_191</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/<span class="built_in">local</span>/hadoop-2.8.5</span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=/usr/<span class="built_in">local</span>/hadoop-2.8.5/etc/hadoop</span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_IP=172.17.0.2</span><br><span class="line"><span class="built_in">export</span> SPARK_DIST_CLASSPATH=$(/usr/<span class="built_in">local</span>/hadoop/bin/hadoop classpath)</span><br></pre></td></tr></table></figure></li><li><p><code>vi /usr/local/spark/conf/slaves</code>，配置从节点<code>localhost slave01 slave02</code></p></li></ol><h2 id="MapReduce-wordcount"><a href="#MapReduce-wordcount" class="headerlink" title="MapReduce wordcount"></a>MapReduce wordcount</h2><ol><li>创建用户目录：<code>/usr/local/hadoop/bin/hdfs dfs -mkdir input /user/</code></li><li>上传input(自行在其中增加需要进行wordcount的文件)：<code>/usr/local/hadoop/bin/hdfs dfs -put input /user/</code></li><li>运行wordcount示例：<code>/usr/local/hadoop/bin/hadoop jar /usr/local/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.5.jar wordcount /user/input /user/output</code></li></ol><h2 id="Spark-wordcount"><a href="#Spark-wordcount" class="headerlink" title="Spark wordcount"></a>Spark wordcount</h2><ol><li>要求hdfs已启动，并将input文件上传</li><li><p>在master中安装pyspark：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install python3-pip</span><br><span class="line">pip3 install pyspark</span><br></pre></td></tr></table></figure></li><li><p>创建一个python3的软链接pytho：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line">ln -s python3 python</span><br></pre></td></tr></table></figure></li><li><p>python实现wordcount</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wordcount.py</span></span><br><span class="line">from pyspark import SparkContext</span><br><span class="line">from time import time</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line">sc = SparkContext(<span class="string">'local'</span>, <span class="string">'wordcount'</span>)</span><br><span class="line">text_file = sc.textFile(<span class="string">"hdfs://master:9000/user/input"</span>)</span><br><span class="line">counts = text_file.flatMap(lambda line: line.split(<span class="string">" "</span>)) \</span><br><span class="line">            .map(lambda word: (word, 1)) \</span><br><span class="line">            .reduceByKey(lambda a, b: a + b)</span><br><span class="line">counts.saveAsTextFile(<span class="string">"hdfs://master:9000/user/output"</span>)</span><br><span class="line">elapsed = (time() - start)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Time used:"</span>, int(elapsed * 1000))</span><br></pre></td></tr></table></figure></li><li><p>运行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python wordcount.py</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fedora重装记录</title>
      <link href="/2019/05/17/Fedora%E9%87%8D%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/05/17/Fedora%E9%87%8D%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h2><h3 id="Fedora安装"><a href="#Fedora安装" class="headerlink" title="Fedora安装"></a>Fedora安装</h3><ol><li>准备一个容量足够大的U盘，备份好U盘数据后，格式化U盘</li><li>进入Fedora官网获取U盘制作工具Fedora Media Writer</li><li>安装Fedora Media Writer，并使用其制作LiveUSB</li><li>重启电脑进入BIOS，打开从USB启动，重启后选择进入U盘中的Fedora</li><li>选择安装到本地，进行安装即可</li></ol><h3 id="设置打开终端快捷键"><a href="#设置打开终端快捷键" class="headerlink" title="设置打开终端快捷键"></a>设置打开终端快捷键</h3><p>设置 =&gt; 设备 =&gt; Keyboard =&gt; + =&gt; {名称}自取，命令为<code>gnome-terminal</code>，{快捷键}自选</p><h3 id="更新系统并删除旧内核"><a href="#更新系统并删除旧内核" class="headerlink" title="更新系统并删除旧内核"></a>更新系统并删除旧内核</h3><ol><li>更新系统：<code>sudo dnf update</code></li><li>重启…</li><li>查看已安装的内核相关包：<code>rpm -qa | grep kernel</code></li><li>查看当前使用的内核：<code>uname -r</code></li><li>删除旧内核版本：<code>yum remove kernel-*-{要删除的版本}</code></li><li>生成启动菜单：<code>grub2-mkconfig -o /boot/grub2/grub.cfg</code></li></ol><h2 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h2><h3 id="安装chrome浏览器"><a href="#安装chrome浏览器" class="headerlink" title="安装chrome浏览器"></a>安装chrome浏览器</h3><ol><li>安装chrome教程：<a href="https://www.if-not-true-then-false.com/2010/install-google-chrome-with-yum-on-fedora-red-hat-rhel/" target="_blank" rel="noopener">Install Google Chrome on Fedora 29/28</a></li><li><p>添加dnf配置：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install fedora-workstation-repositories</span><br><span class="line">sudo dnf config-manager --<span class="built_in">set</span>-enabled google-chrome</span><br></pre></td></tr></table></figure></li><li><p>安装chrome：<code>dnf install google-chrome-stable</code></p></li><li><a href="https://ggfwzs.com/" target="_blank" rel="noopener">谷歌访问助手</a></li></ol><h3 id="安装VScode"><a href="#安装VScode" class="headerlink" title="安装VScode"></a>安装VScode</h3><p>以下步骤参考：<a href="https://code.visualstudio.com/docs/setup/linux#_rhel-fedora-and-centos-based-distributions" target="_blank" rel="noopener">官网教程</a></p><h4 id="配置repo"><a href="#配置repo" class="headerlink" title="配置repo"></a>配置repo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc</span><br><span class="line">sudo sh -c <span class="string">'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" &gt; /etc/yum.repos.d/vscode.repo'</span></span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnf check-update</span><br><span class="line">sudo dnf install code</span><br></pre></td></tr></table></figure><h4 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h4><table><thead><tr><th style="text-align:center"><strong>功能</strong></th><th style="text-align:center"><strong>插件名</strong></th></tr></thead><tbody><tr><td style="text-align:center">python语言支持</td><td style="text-align:center">python</td></tr><tr><td style="text-align:center">中文语言包</td><td style="text-align:center">Chinese (Simplified) Language Pack for Visual Studio Code</td></tr><tr><td style="text-align:center">括号配对</td><td style="text-align:center">Bracket Pair Colorizer</td></tr><tr><td style="text-align:center">主题</td><td style="text-align:center">One Dark Pro</td></tr><tr><td style="text-align:center">python自动对齐</td><td style="text-align:center">Python-autopep8</td></tr><tr><td style="text-align:center">路径补全</td><td style="text-align:center">Path Intellisense</td></tr></tbody></table><h3 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h3><ol><li>配置repo：<code>sudo dnf config-manager --add-repo=http://repo.fdzh.org/FZUG/FZUG.repo</code></li><li>由于Fedora版本为29，fdzh还没有提供对应repo，可以<strong>尝试</strong>修改<code>FZUG.repo</code>：替换<code>$realese</code>为<code>26</code>或<code>27</code></li><li>安装fctix：<code>dnf -y install fcitx</code></li><li>安装搜狗拼音：<code>dnf -y install sogoupinyin</code></li><li><p>配置fcitx，在<code>/etc/profile</code>中添加如下配置：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#add for sogou input</span></span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT4_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIER=@im=fcitx</span><br></pre></td></tr></table></figure></li><li><p>在gnome-tweak中将fcitx配置为开机自启动项</p></li><li>重启电脑</li></ol><h3 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h3><ol><li>安装virtualenvwrapper：<code>pip3 install --user virtualenvwrapper</code></li><li><p>设置virtualenvwrapper的运行环境变量，编辑<code>~/.bashrc</code>或<code>~/.zshrc</code>，加入以下几行：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="string">'~/.virtualenvs'</span></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh <span class="comment"># 路径视情况而定</span></span><br></pre></td></tr></table></figure></li><li><p>安装virutalenv：<code>sudo dnf install virtualenv</code></p></li><li>创建虚拟环境：<code>mkvirtualenv [名称]</code></li><li>切换虚拟环境：<code>workon [名称]</code></li><li>离开虚拟环境：<code>deactivate</code></li><li>删除虚拟环境：<code>rmvirtualenv [名称]</code></li><li>常用包：<code>tensorflow</code>、<code>scikit-learn</code>、<code>matplotlib</code>、<code>autopep8</code>、<code>flake8</code>、<code>keras</code></li></ol><h3 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h3><ol><li><strong>坚果云</strong>：挺好用的网盘(网络<strong>共享文件夹</strong>)软件，安装见<a href="[https://link](https://www.jianguoyun.com/s/downloads/linux">官网</a>)</li><li><strong>vivaldi浏览器</strong>：<strong>界面</strong>要比chrome要好看，<strong>自由度</strong>较高，但是<strong>flash安装</strong>起来有点<strong>难受</strong>，<a href="https://vivaldi.com/" target="_blank" rel="noopener">vivaldi官网</a>提供rpm包</li><li><strong>网易云音乐</strong>：可以直接将官网的deb包解压后手动安装，教程参考<a href="https://www.wenjinyu.me/zh/installing-netease-music-player-in-fedora-29/" target="_blank" rel="noopener">wenjinyu的博客</a></li></ol><h2 id="Fedora美化"><a href="#Fedora美化" class="headerlink" title="Fedora美化"></a>Fedora美化</h2><h3 id="gnome主题"><a href="#gnome主题" class="headerlink" title="gnome主题"></a>gnome主题</h3><ol><li>安装优化工具<code>gnome-tweak-tool</code>：<code>sudo dnf install gnome-tweak-tool</code></li><li><a href="https://www.gnome-look.org/" target="_blank" rel="noopener">主题、图标获取地址</a></li><li>主题文件解压到<code>/usr/share/themes</code>，图标文件解压到<code>/usr/share/icons</code></li><li>OSX样式dock，软件商店搜索<code>dash-to-dock</code>下载即可</li></ol><h3 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh My Zsh"></a>Oh My Zsh</h3><ol><li>以下步骤参考<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" target="_blank" rel="noopener">zsh安装</a></li><li><p>安装zsh，并修改为默认命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install zsh</span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure></li><li><p><strong>重启命令行</strong>或<strong>注销</strong>或<strong>重启系统</strong>，打开命令行，根据提示输入<code>0</code></p></li><li>安装Oh My Zsh：<code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></li></ol><h4 id="agnoster主题"><a href="#agnoster主题" class="headerlink" title="agnoster主题"></a>agnoster主题</h4><ol><li><code>vi ~/.zshrc</code>，修改<code>ZSH_THEME=&quot;agnoster&quot;</code></li><li>安装powerline及字体：<code>sudo dnf install powerline powerline-fonts</code></li><li><p><strong>(可选)</strong> 用户名机器名前缀太长：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/themes</span><br><span class="line">vi agnoster.zsh-theme</span><br><span class="line"></span><br><span class="line">prompt_segment black default <span class="string">"%(!.%&#123;%F&#123;yellow&#125;%&#125;.)%n@%m"</span></span><br><span class="line">=&gt; prompt_segment black default <span class="string">"%(!.%&#123;%F&#123;yellow&#125;%&#125;.)%n"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>(可选)</strong> 修改文件路径前缀过长：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/themes</span><br><span class="line">vi agnoster.zsh-theme</span><br><span class="line"></span><br><span class="line">prompt_segment blue <span class="variable">$CURRENT_FG</span> <span class="string">'%~'</span></span><br><span class="line">=&gt; prompt_segment blue <span class="variable">$CURRENT_FG</span> <span class="string">'%c'</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="powerlevel9k主题"><a href="#powerlevel9k主题" class="headerlink" title="powerlevel9k主题"></a>powerlevel9k主题</h4><p>以下步骤参考<a href="https://dreamcats.github.io/2019/05/24/mac%E7%BB%88%E7%AB%AF-iterm2-zsh-oh-my-zsh/" target="_blank" rel="noopener">dreamcats</a>的博客</p><ol><li><p>获取主题：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></li><li><p><code>vi ~/.zshrc</code>，修改<code>ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</code></p></li><li><p><strong>(可选)</strong> 主题配置</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ==== Theme Settings ====</span></span><br><span class="line"><span class="comment"># PowerLevel9k</span></span><br><span class="line"><span class="comment"># 终端配色</span></span><br><span class="line"><span class="built_in">export</span> TERM=<span class="string">"xterm-256color"</span></span><br><span class="line"><span class="comment"># user name 注意之前的DEFALUT_USER 注释</span></span><br><span class="line">POWERLEVEL9K_CONTEXT_TEMPLATE=<span class="string">"&#123;YOUR_USERNAME&#125;"</span></span><br><span class="line"><span class="comment"># 设置 oh-my-zsh powerlevel9k 主题左边元素显示</span></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir rbenv vcs)</span><br><span class="line"><span class="comment"># 设置 oh-my-zsh powerlevel9k 主题右边元素显示</span></span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(virtualenv status root_indicator background_jobs time)</span><br><span class="line"><span class="comment">#新起一行显示命令 (推荐！极其方便）</span></span><br><span class="line">POWERLEVEL9K_PROMPT_ON_NEWLINE=<span class="literal">true</span></span><br><span class="line"><span class="comment">#右侧状态栏与命令在同一行</span></span><br><span class="line">POWERLEVEL9K_RPROMPT_ON_NEWLINE=<span class="literal">true</span></span><br><span class="line"><span class="comment">#缩短目录层级</span></span><br><span class="line">POWERLEVEL9K_SHORTEN_DIR_LENGTH=1</span><br><span class="line"><span class="comment">#缩短目录策略：隐藏上层目录中间的字</span></span><br><span class="line"><span class="comment">#POWERLEVEL9K_SHORTEN_STRATEGY="truncate_middle"</span></span><br><span class="line"><span class="comment">#添加连接上下连接箭头更方便查看</span></span><br><span class="line">POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=<span class="string">"↱"</span></span><br><span class="line">POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=<span class="string">"↳ "</span></span><br><span class="line"><span class="comment"># 新的命令与上面的命令隔开一行</span></span><br><span class="line"><span class="comment">#POWERLEVEL9K_PROMPT_ADD_NEWLINE=true</span></span><br><span class="line"><span class="comment"># Git仓库状态的色彩指定</span></span><br><span class="line">POWERLEVEL9K_VCS_CLEAN_FOREGROUND=<span class="string">'blue'</span></span><br><span class="line">POWERLEVEL9K_VCS_CLEAN_BACKGROUND=<span class="string">'black'</span></span><br><span class="line">POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=<span class="string">'yellow'</span></span><br><span class="line">POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND=<span class="string">'black'</span></span><br><span class="line">POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=<span class="string">'red'</span></span><br><span class="line">POWERLEVEL9K_VCS_MODIFIED_BACKGROUND=<span class="string">'black'</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="常用插件列表"><a href="#常用插件列表" class="headerlink" title="常用插件列表"></a>常用插件列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(git extract z zsh-syntax-highlighting zsh-autosuggestions colorize)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zsh-syntax-highlighting</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># zsh-autosuggestions</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Fedora </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
