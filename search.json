[{"title":"git常用命令","url":"/2019/05/17/git常用命令/","content":"\n## 常用操作\n\n### git三步提交操作\n\n`git add [文件名]`\n\n`git commit -m\"[描述]\"`\n\n`git push origin [本地分支名]:[远程分支名]`\n\n### git创建新分支\n\n查看当前分支：`git branch`\n\n创建并切换：`git checkout -b [分支名]`\n\n推送新分支到远程：`git push origin [分支名]`\n\n切换分支：`git checkout [分支名]`\n\n### git删除操作\n\n删除分支\n\n```git push origin --delete [分支名]```\n\n删除版本库文件(保留本地)\n\n```git rm --cached file```\n\n删除版本库文件夹(保留本地)\n\n```git rm --cached -r directory```\n\n### git合并操作\n\n更新本地：`git pull`\n\n合并前对比：`git diff <source_branch> <target_branch>`\n\n合并分支到当前分支：`git merge [分支名]`\n\n### git撤销操作\n\n查看commit_id：`git log`\n\n回退到某个commit并保存之前的修改：`git reset --soft <commit_id>`\n\n回退到某个commit并保存之前的修改：`git reset --hard <commit_id>`\n\n### git上传本地已有项目\n\n1. `git init`\n2. `git add .`\n3. `git commit -m 'first commit'`\n4. `git remote add origin 你的远程库地址` 如 `git remote add origin https://github.com/DENGQUANXIN/helloworld.git`\n5. `git pull --rebase origin master`\n6. `git push -u origin master`\n","tags":["Git"]},{"title":"shell常用命令","url":"/2019/05/17/shell常用命令/","content":"\n## 常用命令\n\n### ps\n\n显示所有进程信息： `ps -A`\n\n显示指定用户信息： `ps -u [用户名]`\n\n显示所有进程信息，包括命令行： `ps -ef`\n\nps组合grep： `ps -ef | grep [条件]`\n\n列出正在内存中的程序： `ps aux`\n\n列出类似程序树的程序显示：`ps -axjf`\n\n### crontab\n\n增加定时命令：`crontab -e`\n\n定时命令格式：`crontab -e [分钟][小时][日期][月份][星期] [需要执行的命令]`\n\n(其中*表示任意，数字对应相应的单位)\n\n示例(每天12点运行test.sh脚本)：`0 12 * * * sh test.sh`\n\n查看定时命令列表：`crontab -l`\n\n### mutt\n\n`\necho \"邮件内容123456\" | mutt -s \"邮件标题测试邮件\"   -a /scripts/test.txt  test@126.com\n`\n\n### grep\n\n1. -a ：将 binary 文件以 text 文件的方式搜寻数据\n2. -c ：计算找到 ‘搜寻字符串’ 的次数\n3. -i ：忽略大小写的不同，所以大小写视为相同\n4. -n ：顺便输出行号\n5. -v ：反向选择，亦即显示出没有 ‘搜寻字符串’ 内容的那一行\n6. —color=auto ：可以将找到的关键词部分加上颜色的显示\n\n单字符匹配：`[字符范围]`\n\n单字符字符反向选择：`[^字符范围]`\n\n行首：`^需匹配字符`\n\n行尾：`需匹配字符$`\n\n任意一个字符：`.`\n\n重复0个或多个之前的字符：`需重复字符*`\n\n限定重复之前字符次数：`需重复字符\\{次数\\}`\n\n全目录查找字符串：`grep -R \"字符串\" [目录]`\n\n### comm\n\n- -1：不显示在第一个文件出现的内容；\n- -2：不显示在第二个文件中出现的内容；\n- -3：不显示同时在两个文件中都出现的内容。\n\n交集：`comm aaa.txt bbb.txt -1 -2`\n\n非交集：`comm aaa.txt bbb.txt -3 | sed 's/^\\t//'`\n\n差集：`comm aaa.txt bbb.txt -2 -3`\n\n差集：`comm aaa.txt bbb.txt -1 -3`\n\n### uniq\n\n- -c或—count: 在每列旁边显示该行重复出现的次数。\n- -d或—repeated: 仅显示重复出现的行列。\n- -f<栏位>或—skip-fields=<栏位>: 忽略比较指定的栏位。\n- -s<字符位置>或—skip-chars=<字符位置>: 忽略比较指定的字符。\n- -u或—unique: 仅显示出一次的行列。\n- -w<字符位置>或—check-chars=<字符位置>: 指定要比较的字符。\n\n### nohup\n\n不间断运行：`nohup /root/start.sh &`\n\n### cd -\n进行两个目录之间的切换。\n\n### wc\n统计文件行数。\n\n## 常用操作\n\n### 查看磁盘空间\n\n`df -lh`：整个磁盘空间\n\n`du --max-depth=1 -h`：目录文件磁盘占用\n\n`du -sh`：同上\n\n`du -h --max-depth=0`：同上\n\n`du -sh /root/sw`：可以指定目录，作用同上\n\n### tmpfs内存文件挂载和使用\n\n```shell\ntmpfs /tmp      tmpfs\ndefaults,nodev,nosuid,mode=1777                 0 0\ntmpfs /var/lock tmpfs defaults,nodev,nosuid,noexec,mode=1777,size=10m 0 0\ntmpfs /var/run  tmpfs defaults,nodev,nosuid,noexec,mode=0755,size=10m 0 0\n```\n\n### 双系统下为fedora扩展home目录分区大小\n\n1. 在windows下磁盘管理中，压缩可以腾出空间的盘，分出空闲的磁盘空间；\n2. （以下都需要sudo）在fedora命令行中使用fdisk -l可以查看当前的磁盘分配情况；\n3. 输入`fdisk /dev/sda`；\n4. 输入n，新建分区；\n5. 输入分区号，回车默认就好（此处以12为例，根据实际情况调整）；\n6. 输入起始柱面，回车默认就好；\n7. 输入结束柱面，回车默认就好（默认即为分配所有剩余空间）；\n8. 输入w，保存更改；\n9. `reboot`，重启主机；\n10. 重启完成后，`pvcreate /dev/sda12`、`vgextend fedora /dev/sda12`（其中12与步骤5中对应）；\n11. `vgdisplay fedora`，记下Free PE数\n12. `lvextend -l +[Free PE数] /dev/fedora/home`，其中最后的路径根据实际情况修改;\n13. `resize2fs /dev/fedora/root`，扩展home挂载点；\n14. `df -h`，查看文件系统情况。\n\n### 删除fedora旧内核\n\n```shell\nrpm -qa | grep kernel #查看系统中所存在的kernel\nuname -r #查看当前使用kernel\nsudo yum remove kernel-*-4.8.6-300.fc25.x86_64 #删除旧版本内核\nsudo grub2-mkconfig -o /boot/grub2/grub.cfg #生成启动项列表\n```","tags":["Linux"]},{"title":"Docker+Hadoop+Spark简单环境搭建","url":"/2019/05/17/Docker、Hadoop、Spark/","content":"\n## Docker\n\n1. Fedora安装Docker\n```bash\n$ sudo dnf -y install dnf-plugins-core\n$ sudo dnf config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/fedora/docker-ce.repo\n$ sudo dnf install docker-ce docker-ce-cli containerd.io\n```\n2. 启动Docker服务：`service docker start`\n3. [新国大Docker镜像](https://hub.docker.com/r/nusbigdatacs4225/ubuntu-with-hadoop-spark)，配置为：\n```\n- ubuntu\n- jdk 1.8.0_191 (/usr/java)\n- Hadoop 2.8.5 (/usr/local/hadoop)\n- Spark 2.2.0 (/usr/local/spark)\n```\n4. 创建containers\n```bash\n$ docker run -it -h master --name master nusbigdatacs4225/ubuntu-with-hadoop-spark\n$ docker run -it -h slave01 --name slave01 nusbigdatacs4225/ubuntu-with-hadoop-spark\n$ docker run -it -h slave02 --name slave02 nusbigdatacs4225/ubuntu-with-hadoop-spark\n```\n5. 退出container：`exit`\n6. 查看containers：`sudo docker ps [-a]`\n7. 重启container：`sudo docker container start [name]`\n8. 进入container命令行：`sudo docker attach [name]`\n\n## Hadoop\n\n1. 查看三个容器各自的ip，如：\n\n```bash\nmaster: 172.17.0.2\nslave01:172.17.0.3\nslave02:172.17.0.4\n```\n2. 讲对应ip填入`/etc/hosts`配置中：\n```bash\n$ vim /etc/hosts\n# 在文件最后增加\n172.17.0.2\tmaster\n172.17.0.3\tslave01\n172.17.0.4\tslave02\n```\n3. 在`/usr/local/hadoop/etc/hadoop/slaves`配置中增加` slave01 slave02`\n4. 初始化hdfs并且运行\n```bash\ncd /usr/local/hadoop\nbin/hdfs namenode-format\nsbin/start-all.sh\n```\n5. hdfs命令：`/usr/local/hadoop/bin/hdfs dfs -[命令] [参数]`\n6. 停止hdfs：`/usr/local/hadoop/sbin/stop-all.sh`\n7. 查看运行：`jps`\n\n## Spark\n\n1. 在`/usr/local/spark/conf/spark-env.sh`中配置hadoop与Java路径：\n```bash\nexport JAVA_HOME=/usr/java/jdk1.8.0_191\nexport HADOOP_HOME=/usr/local/hadoop-2.8.5\nexport HADOOP_CONF_DIR=/usr/local/hadoop-2.8.5/etc/hadoop\nexport SPARK_MASTER_IP=172.17.0.2\nexport SPARK_DIST_CLASSPATH=$(/usr/local/hadoop/bin/hadoop classpath)\n```\n2. 在`/usr/local/spark/conf/slaves`中配置从节点：\n```bash\nlocalhost slave01 slave02\n```\n\n## MapReduce wordcount\n\n1. 创建用户目录：`/usr/local/hadoop/bin/hdfs dfs -mkdir input /user/`\n2. 上传input(自行在其中增加需要进行wordcount的文件)：`/usr/local/hadoop/bin/hdfs dfs -put input /user/`\n3. 运行wordcount示例：`/usr/local/hadoop/bin/hadoop jar /usr/local/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.5.jar wordcount /user/input /user/output`\n\n## Spark wordcount\n\n1. 要求hdfs已启动，并将input文件上传\n2. 在master中安装pyspark：\n```bash\napt-get update\napt-get install python3-pip\npip3 install pyspark\n```\n3. 创建一个python3的软链接pytho：\n```bash\ncd /usr/bin\nln -s python3 python\n```\n4. python实现wordcount\n```bash\n# wordcount.py\nfrom pyspark import SparkContext\nfrom time import time\n\n\nstart = time()\nsc = SparkContext('local', 'wordcount')\ntext_file = sc.textFile(\"hdfs://master:9000/user/input\")\ncounts = text_file.flatMap(lambda line: line.split(\" \")) \\\n             .map(lambda word: (word, 1)) \\\n             .reduceByKey(lambda a, b: a + b)\ncounts.saveAsTextFile(\"hdfs://master:9000/user/output\")\nelapsed = (time() - start)\nprint(\"Time used:\", int(elapsed * 1000))\n```\n5. 运行\n```bash\npython wordcount.py\n```","tags":["Docker","Hadoop","Spark"]},{"title":"Fedora重装记录","url":"/2019/05/17/Fedora重装记录/","content":"## 基本安装\n\n### Fedora安装\n\n1. 准备一个容量足够大的U盘，备份好U盘数据后，格式化U盘\n2. 进入Fedora官网获取U盘制作工具Fedora Media Writer\n3. 安装Fedora Media Writer，并使用其制作LiveUSB\n4. 重启电脑进入BIOS，打开从USB启动，重启后选择进入U盘中的Fedora\n5. 选择安装到本地，进行安装即可\n\n### 设置打开终端快捷键\n\n设置 => 设备 => Keyboard => + => {名称}自取，命令为`gnome-terminal`，{快捷键}自选\n\n### 更新系统并删除旧内核\n\n1. 更新系统：`sudo dnf update`\n2. 重启...\n3. 查看已安装的内核相关包：`rpm -qa | grep kernel`\n4. 查看当前使用的内核：`uname -r`\n5. 删除旧内核版本：`yum remove kernel-*-{要删除的版本}`\n6. 生成启动菜单：`grub2-mkconfig -o /boot/grub2/grub.cfg`\n\n## 常用软件安装\n\n### 安装chrome浏览器\n\n1. 安装chrome教程：[Install Google Chrome on Fedora 29/28](https://www.if-not-true-then-false.com/2010/install-google-chrome-with-yum-on-fedora-red-hat-rhel/)\n2. 添加dnf配置：\n```bash\nsudo dnf install fedora-workstation-repositories\nsudo dnf config-manager --set-enabled google-chrome\n```\n3. 安装chrome：`dnf install google-chrome-stable`\n4. [谷歌访问助手](https://ggfwzs.com/)\n\n### 安装VScode\n\n1. [官网教程](https://code.visualstudio.com/docs/setup/linux#_rhel-fedora-and-centos-based-distributions)\n2. 配置repo\n```bash\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\nsudo sh -c 'echo -e \"[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/vscode.repo'\n```\n3. 安装\n```bash\ndnf check-update\nsudo dnf install code\n```\n4. 常用插件列表\n```bash\npy：   python \n中文： Chinese (Simplified) Language Pack for Visual Studio Code\n括号： Bracket Pair Colorizer\n主题:  One Dark Pro\n对齐:  Python-autopep8\n```\n\n### 安装搜狗输入法\n1. 配置repo：`sudo dnf config-manager --add-repo=http://repo.fdzh.org/FZUG/FZUG.repo`\n2. 由于Fedora版本为29，需要修改`FZUG.repo`：替换`$realese`为`26`或`27`\n3. 安装fctix：`dnf -y install fcitx`\n4. 安装搜狗拼音：`dnf -y install sogoupinyin`\n5. 配置fcitx，在`/etc/profile`中添加如下配置：\n```bash\n#add for sogou input\nexport GTK_IM_MODULE=fcitx\nexport QT4_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIER=@im=fcitx\n```\n6. 在gnome-tweak中将fcitx配置为开机自启动项\n7. 重启电脑\n\n### 安装python\n\n1. 安装virtualenvwrapper：`pip3 install --user virtualenvwrapper`\n2. 设置virtualenvwrapper的运行环境变量，编辑`~/.bashrc`或`~/.zshrc`，加入以下几行：\n```bash\nVIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\nexport WORKON_HOME='~/.virtualenvs'\nsource /usr/local/bin/virtualenvwrapper.sh # 路径视情况而定\n```\n3. 安装virutalenv：`sudo dnf install virtualenv`\n4. 创建虚拟环境：`mkvirtualenv [名称]`\n5. 切换虚拟环境：`workon [名称]`\n6. 离开虚拟环境：`deactivate`\n7. 删除虚拟环境：`rmvirtualenv [名称]`\n8. 常用包：`tensorflow`、`scikit-learn`、`matplotlib`、`autopep8`、`flake8`、`keras`\n\n### 安装坚果云\n1. 官网下载后双击安装即可\n\n## Fedora美化\n\n### gnome主题\n\n1. 安装优化工具gnome-tweak-tool：`sudo dnf install gnome-tweak-tool`\n2. [主题、图标获取地址](https://www.gnome-look.org/)\n3. 主题文件解压到`/usr/share/themes`，图标文件解压到`/usr/share/themes/icons`\n4. OSX样式侧边栏：\n```bash\ngit clone https://github.com/micheleg/dash-to-dock.git\ncd dash-to-dock\nmake\nmake install\n```\n\n### Oh My Zsh\n\n1. [zsh安装](https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH)\n2. 安装zsh：`sudo dnf install zsh`\n3. 修改为默认命令行：`chsh -s $(which zsh)`\n4. 重启系统，打开命令行，根据提示输入`0`\n5. 安装Oh My Zsh：`sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"`\n6. `vi ~/.zshrc`，修改`ZSH_THEME=\"agnoster\"`\n7. 安装powerline及字体：`sudo dnf install powerline powerline-fonts`\n8. 修改用户名机器名前缀太长：\n```bash\ncd ~/.oh-my-zsh/themes\nvi agnoster.zsh-theme\n\nprompt_segment black default \"%(!.%{%F{yellow}%}.)%n@%m\"\n=> prompt_segment black default \"%(!.%{%F{yellow}%}.)%n\"\n```\n9. 修改agnoster文件路径前缀过长：\n```bash\ncd ~/.oh-my-zsh/themes\nvi agnoster.zsh-theme\n\nprompt_segment blue $CURRENT_FG '%~'\n=> prompt_segment blue $CURRENT_FG '%c'\n```\n10. 常用插件列表\n```bash\n(git zsh-syntax-highlighting zsh-autosuggestions colorize)\n```","tags":["Fedora","Python"]}]