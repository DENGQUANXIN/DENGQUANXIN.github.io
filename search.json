[{"title":"Fedora使用GPU进行深度学习","url":"/2019/05/26/Fedora使用GPU进行深度学习/","content":"\n## 系统配置\n\n| **内容**         | **版本**                        |\n| :------------: | :---------------------------: |\n| CPU            | i7-8700                       |\n| 显卡             | GeForce RTX2070/PCIe/SSE2     |\n| Fedora         | 64位30版本                       |\n| Python         | 3.5.4                         |\n| CUDA           | 9.0                           |\n| cuDNN          | 7.4.2                         |\n| Tensorflow     | 1.12.0                        |\n\n## 安装Nvidia驱动\n\n### 安装Fedora\n\nFedora系统安装步骤可以看[Fedora重装记录](https://dengquanxin.github.io/2019/05/17/Fedora%E9%87%8D%E8%A3%85%E8%AE%B0%E5%BD%95/)。\n\n在安装Fedora时，由于**未安装NVIDIA驱动**(也可能是电脑未启用集显的原因)，所以在通过U盘启动的系统会很卡。\n\n解决办法：1、痛并快乐着享受卡顿安装的过程；2、或者使用集显试试(万一行了呢)。\n\n### 驱动安装\n\n同时安装好的系统由于**未安装nvidia驱动**，也会造成图形界面会很卡，驱动安装好就行了。\n\n#### 使用软件商店安装\n\n1. 打开**软件商店**\n2. 选择**软件源**\n3. 启用**RPM Fusion for Fedora 30-Nonfree-NVIDIA Driver**软件源\n4. **注销**或**重启**\n5. 打开软件商店，选择**附加组件**\n6. 选择**硬件驱动**，安装**NVIDIA Linux Graphics Driver**\n7. **重启**\n\n#### 使用dnf安装\n\n1. 安装好系统**首次**启动，先进入系统完成**账户创建**，然后**重启**或**登录**\n2. 在**登录界面**，使用`ctrl+alt+f2`组合键进入命令行\n3. 以下安装步骤参考[Fedora文档-NVIDIA Optimus Bumblebee](https://docs.fedoraproject.org/en-US/quick-docs/bumblebee/index.html)\n4. 执行以下命令：\n\n   ```bash\n   sudo dnf install fedora-workstation-repositories\n   sudo dnf config-manager rpmfusion-nonfree-nvidia-driver --set-enabled\n   sudo dnf install akmod-nvidia acpi\n   reboot  # 重启\n   ```\n\n## 安装CUDA\n\n进入[CUDA下载](https://developer.nvidia.com/cuda-90-download-archive)，选择对应的操作系统(Fedora30**向下兼容**)，选择**rpm(network)**(如果**dnf下载**速度快)或者**rpm(local)**(如果**网络下载**速度快)\n\n打开终端，运行以下命令安装CUDA：\n\n```bash\ncd ~/Downloads\nsudo rpm -i cuda-repo-fedora25-9.0.176-1.x86_64.rpm  # 使用rpm(network)\nsudo rpm -i cuda-repo-fedora25-9-0-local-9.0.176-1.x86_64.rpm  # 使用rpm(local)\nsudo dnf clean all\nsudo dnf install cuda-libraries-9-0\n```\n\n> ***Note:*** *replace \"cuda\" with the \"cuda-libraries-9-0\" meta package.*\n> 需要将官网install命令的cuda替换成cuda-libraries-9-0，不然会安装cuda9.1\n\n之后配置环境变量，`vi ~/.bashrc`(若使用zsh则`vi ~/.zshrc`)，在文件末尾添加：\n\n```bash\n# path for cuda\nexport LD_LIBRARY_PATH=:/usr/local/cuda/lib64\nexport CUDA_HOME=/usr/local/cuda\nexport CPLUS_INCLUDE_PATH=:/usr/local/cuda/samples/common/inc\n```\n\n保存后，需要创建一个`cuda`到`cuda-9.0`的软连接，以便于**多版本CUDA切换**：\n\n```bash\nsudo rm -f /usr/local/cuda\nsudo ln -s /usr/local/cuda-9.0 /usr/local/cuda\nsource ~/.bashrc  # 使得环境变量立即生效\n```\n\n## 安装cuDNN\n\n进入[cudnn下载](https://developer.nvidia.com/rdp/cudnn-archive)，对应cuda版本的cudnn下载。本文使用版本为7.4.2（因为**比较顺口**），下载`cuDNN Library for Linux`\n\n> ***Note:*** 下载需要登录，创建一个就行了\n\n下载完成后，打开终端，运行如下命令：\n\n```bash\ncd ~/Downloads\ntar -xvf cudnn-9.0-linux-x64-v7.tgz\ncd cudnn-9.0-linux-x64-v7\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include/\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\n```\n\n创建软链接，便于以后切换不同的版本：\n\n```bash\ncd /usr/local/cuda/lib64/\nsudo ln -s libcudnn.so.7.4.2 libcudnn.so.7\nsudo ln -s libcudnn.so.7 libcudnn.so\n```\n\n## 安装python\n\n`Fedora30`自带`Python3.7`，发现安装不了`tensorflow-1.12.0`，需要降低版本。因此使用`pyEnv`来实现**多版本python共存**。\n\n安装pyenv：\n\n```bash\ncurl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash\n```\n\n之后配置环境变量，`vi ~/.bashrc`，若使用zsh则`vi ~/.zshrc`，在文件末尾添加：\n\n```bash\n# Load pyenv automatically by adding\nexport PATH=\"/home/{USERNAME_OF_YOU}/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\n\n使环境变量生效，并更新pyenv:\n\n```bash\nsource ~/.bashrc  # 使得环境变量立即生效\n# 更新\npyenv update\n```\n\n> ***NOTE:*** 如果需要使用`matplotlib`库，需要使用`sudo dnf install python3-tkinter tk-devel`提前安装`tkinter`\n\n安装指定版本python，并设置为shell使用版本:\n\n```bash\npyenv install 3.5.4\npyenv shell 3.5.4\n```\n\n可以通过将`pyenv shell 3.5.4`命令添加到`.bashrc`或`.zshrc`中，使其成为命令行默认python版本（这个做法感觉**有点暴力**，可能有更好的做法？）\n\n安装指定版本tensorflow-gpu：\n\n```bash\npip install -U --pre tensorflow-gpu==1.12.0\n```\n\n安装完成后在python命令行，`import tensorflow`试试是否安装成功\n\n## 一些问题以及解决\n\n1、遇到`CUDNN_STATUS_INTERNAL_ENRROR`错误？\n***解决***：万能三步，清除缓存试试`rm -rf ~/.nv`？重启试试？重装cudnn试试？\n\n2、发现keras一个程序就占用了所有显存？\n***解决***：参考[keras设置GPU使用率](https://www.cnblogs.com/to-creat/p/8094174.html)，在python文件中添加：\n\n```python\nimport tensorflow as tf\nfrom keras.backend.tensorflow_backend import set_session\n\nconfig = tf.ConfigProto()\nconfig.gpu_options.allocator_type = 'BFC'\nconfig.gpu_options.per_process_gpu_memory_fraction = 0.3\nconfig.gpu_options.allow_growth = True\nset_session(tf.Session(config=config))\n```\n\n3、发现没有`nvidia-smi`命令？\n***解决***：`sudo dnf install xorg-x11-drv-nvidia-cuda`，可以顺便安装`pip install gpustat`更方便地查看GPU状态\n","tags":["Fedora","Deep Learning"]},{"title":"git常用命令","url":"/2019/05/17/git常用命令/","content":"\n## 常用操作\n\n### git三步提交操作\n\n`git add [文件名]`\n\n`git commit -m\"[描述]\"`\n\n`git push origin [本地分支名]:[远程分支名]`\n\n### git创建新分支\n\n查看当前分支：`git branch`\n\n创建并切换：`git checkout -b [分支名]`\n\n推送新分支到远程：`git push origin [分支名]`\n\n切换分支：`git checkout [分支名]`\n\n### git删除操作\n\n删除分支\n\n```git\ngit push origin --delete [分支名]\n```\n\n删除版本库文件(保留本地)\n\n```git\ngit rm --cached file\n```\n\n删除版本库文件夹(保留本地)\n\n```git\ngit rm --cached -r directory\n```\n\n### git合并操作\n\n更新本地：`git pull`\n\n合并前对比：`git diff <source_branch> <target_branch>`\n\n合并分支到当前分支：`git merge [分支名]`\n\n### git撤销操作\n\n查看commit_id：`git log`\n\n回退到某个commit并保存之前的修改：`git reset --soft <commit_id>`\n\n回退到某个commit并保存之前的修改：`git reset --hard <commit_id>`\n\n### git上传本地已有项目\n\n1. `git init`\n2. `git add .`\n3. `git commit -m 'first commit'`\n4. `git remote add origin 你的远程库地址` 如 `git remote add origin https://github.com/DENGQUANXIN/helloworld.git`\n5. `git pull --rebase origin master`\n6. `git push -u origin master`\n","tags":["Git"]},{"title":"shell常用命令","url":"/2019/05/17/shell常用命令/","content":"\n## 常用命令\n\n### ps\n\n显示所有进程信息： `ps -A`\n\n显示指定用户信息： `ps -u [用户名]`\n\n显示所有进程信息，包括命令行： `ps -ef`\n\nps组合grep： `ps -ef | grep [条件]`\n\n列出正在内存中的程序： `ps aux`\n\n列出类似程序树的程序显示：`ps -axjf`\n\n### crontab\n\n增加定时命令：`crontab -e`\n\n定时命令格式：`crontab -e [分钟][小时][日期][月份][星期] [需要执行的命令]`\n\n(其中*表示任意，数字对应相应的单位)\n\n示例(每天12点运行test.sh脚本)：`0 12 * * * sh test.sh`\n\n查看定时命令列表：`crontab -l`\n\n### mutt\n\n```bash\necho \"邮件内容123456\" | mutt -s \"邮件标题测试邮件\"   -a /scripts/test.txt  test@126.com\n```\n\n### grep\n\n1. -a ：将 binary 文件以 text 文件的方式搜寻数据\n2. -c ：计算找到 ‘搜寻字符串’ 的次数\n3. -i ：忽略大小写的不同，所以大小写视为相同\n4. -n ：顺便输出行号\n5. -v ：反向选择，亦即显示出没有 ‘搜寻字符串’ 内容的那一行\n6. —color=auto ：可以将找到的关键词部分加上颜色的显示\n\n单字符匹配：`[字符范围]`\n\n单字符字符反向选择：`[^字符范围]`\n\n行首：`^需匹配字符`\n\n行尾：`需匹配字符$`\n\n任意一个字符：`.`\n\n重复0个或多个之前的字符：`需重复字符*`\n\n限定重复之前字符次数：`需重复字符\\{次数\\}`\n\n全目录查找字符串：`grep -R \"字符串\" [目录]`\n\n### comm\n\n- -1：不显示在第一个文件出现的内容；\n- -2：不显示在第二个文件中出现的内容；\n- -3：不显示同时在两个文件中都出现的内容。\n\n交集：`comm aaa.txt bbb.txt -1 -2`\n\n非交集：`comm aaa.txt bbb.txt -3 | sed 's/^\\t//'`\n\n差集：`comm aaa.txt bbb.txt -2 -3`\n\n差集：`comm aaa.txt bbb.txt -1 -3`\n\n### uniq\n\n- -c或—count: 在每列旁边显示该行重复出现的次数。\n- -d或—repeated: 仅显示重复出现的行列。\n- -f<栏位>或—skip-fields=<栏位>: 忽略比较指定的栏位。\n- -s<字符位置>或—skip-chars=<字符位置>: 忽略比较指定的字符。\n- -u或—unique: 仅显示出一次的行列。\n- -w<字符位置>或—check-chars=<字符位置>: 指定要比较的字符。\n\n### nohup\n\n不间断运行：`nohup /root/start.sh &`\n\n### cd -\n\n进行两个目录之间的切换。\n\n### wc\n\n统计文件行数。\n\n## 常用操作\n\n### 查看磁盘空间\n\n`df -lh`：整个磁盘空间\n\n`du --max-depth=1 -h`：目录文件磁盘占用\n\n`du -sh`：同上\n\n`du -h --max-depth=0`：同上\n\n`du -sh /root/sw`：可以指定目录，作用同上\n\n### tmpfs内存文件挂载和使用\n\n```bash\ntmpfs /tmp      tmpfs\ndefaults,nodev,nosuid,mode=1777                 0 0\ntmpfs /var/lock tmpfs defaults,nodev,nosuid,noexec,mode=1777,size=10m 0 0\ntmpfs /var/run  tmpfs defaults,nodev,nosuid,noexec,mode=0755,size=10m 0 0\n```\n\n### 双系统下为fedora扩展home目录分区大小\n\n1. 在windows下磁盘管理中，压缩可以腾出空间的盘，分出空闲的磁盘空间；\n2. （以下都需要sudo）在fedora命令行中使用fdisk -l可以查看当前的磁盘分配情况；\n3. 输入`fdisk /dev/sda`；\n4. 输入n，新建分区；\n5. 输入分区号，回车默认就好（此处以12为例，根据实际情况调整）；\n6. 输入起始柱面，回车默认就好；\n7. 输入结束柱面，回车默认就好（默认即为分配所有剩余空间）；\n8. 输入w，保存更改；\n9. `reboot`，重启主机；\n10. 重启完成后，`pvcreate /dev/sda12`、`vgextend fedora /dev/sda12`（其中12与步骤5中对应）；\n11. `vgdisplay fedora`，记下Free PE数\n12. `lvextend -l +[Free PE数] /dev/fedora/home`，其中最后的路径根据实际情况修改;\n13. `resize2fs /dev/fedora/root`，扩展home挂载点；\n14. `df -h`，查看文件系统情况。\n\n### 删除fedora旧内核\n\n```bash\nrpm -qa | grep kernel #查看系统中所存在的kernel\nuname -r #查看当前使用kernel\nsudo yum remove kernel-*-4.8.6-300.fc25.x86_64 #删除旧版本内核\nsudo grub2-mkconfig -o /boot/grub2/grub.cfg #生成启动项列表\n```\n","tags":["Linux"]},{"title":"Docker+Hadoop+Spark简单环境搭建","url":"/2019/05/17/Docker、Hadoop、Spark/","content":"\n## Docker\n\n1. Fedora安装Docker\n\n    ```bash\n    sudo dnf -y install dnf-plugins-core\n    sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo\n    sudo dnf install docker-ce docker-ce-cli containerd.io\n    ```\n\n2. 启动Docker服务：`service docker start`\n3. [新国大Docker镜像](https://hub.docker.com/r/nusbigdatacs4225/ubuntu-with-hadoop-spark)，配置为：\n\n    ```config\n    - ubuntu\n    - jdk 1.8.0_191 (/usr/java)\n    - Hadoop 2.8.5 (/usr/local/hadoop)\n    - Spark 2.2.0 (/usr/local/spark)\n    ```\n\n4. 创建containers\n\n    ```bash\n    docker run -it -h master --name master nusbigdatacs4225/ubuntu-with-hadoop-spark\n    docker run -it -h slave01 --name slave01 nusbigdatacs4225/ubuntu-with-hadoop-spark\n    docker run -it -h slave02 --name slave02 nusbigdatacs4225/ubuntu-with-hadoop-spark\n    ```\n\n5. 退出container：`exit`\n6. 查看containers：`sudo docker ps [-a]`\n7. 重启container：`sudo docker container start [name]`\n8. 进入container命令行：`sudo docker attach [name]`\n\n## Hadoop\n\n1. 查看三个容器各自的ip，如：\n\n    ```bash\n    master: 172.17.0.2\n    slave01:172.17.0.3\n    slave02:172.17.0.4\n    ```\n\n2. 将对应ip填入`/etc/hosts`配置中：\n\n    ```bash\n    vim /etc/hosts\n    # 在文件最后增加\n    172.17.0.2    master\n    172.17.0.3    slave01\n    172.17.0.4    slave02\n    ```\n\n3. `vi /usr/local/hadoop/etc/hadoop/slaves`，增加`slave01 slave02`\n4. 初始化hdfs并且运行\n\n    ```bash\n    cd /usr/local/hadoop\n    bin/hdfs namenode-format\n    sbin/start-all.sh\n    ```\n\n5. hdfs命令：`/usr/local/hadoop/bin/hdfs dfs -[命令] [参数]`\n6. 停止hdfs：`/usr/local/hadoop/sbin/stop-all.sh`\n7. 查看运行：`jps`\n\n## Spark\n\n1. `vi /usr/local/spark/conf/spark-env.sh`，配置hadoop与Java路径：\n\n    ```bash\n    export JAVA_HOME=/usr/java/jdk1.8.0_191\n    export HADOOP_HOME=/usr/local/hadoop-2.8.5\n    export HADOOP_CONF_DIR=/usr/local/hadoop-2.8.5/etc/hadoop\n    export SPARK_MASTER_IP=172.17.0.2\n    export SPARK_DIST_CLASSPATH=$(/usr/local/hadoop/bin/hadoop classpath)\n    ```\n\n2. `vi /usr/local/spark/conf/slaves`，配置从节点`localhost slave01 slave02`\n\n## MapReduce wordcount\n\n1. 创建用户目录：`/usr/local/hadoop/bin/hdfs dfs -mkdir input /user/`\n2. 上传input(自行在其中增加需要进行wordcount的文件)：`/usr/local/hadoop/bin/hdfs dfs -put input /user/`\n3. 运行wordcount示例：`/usr/local/hadoop/bin/hadoop jar /usr/local/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.5.jar wordcount /user/input /user/output`\n\n## Spark wordcount\n\n1. 要求hdfs已启动，并将input文件上传\n2. 在master中安装pyspark：\n\n    ```bash\n    apt-get update\n    apt-get install python3-pip\n    pip3 install pyspark\n    ```\n\n3. 创建一个python3的软链接pytho：\n\n    ```bash\n    cd /usr/bin\n    ln -s python3 python\n    ```\n\n4. python实现wordcount\n\n    ```bash\n    # wordcount.py\n    from pyspark import SparkContext\n    from time import time\n\n    start = time()\n    sc = SparkContext('local', 'wordcount')\n    text_file = sc.textFile(\"hdfs://master:9000/user/input\")\n    counts = text_file.flatMap(lambda line: line.split(\" \")) \\\n                .map(lambda word: (word, 1)) \\\n                .reduceByKey(lambda a, b: a + b)\n    counts.saveAsTextFile(\"hdfs://master:9000/user/output\")\n    elapsed = (time() - start)\n    print(\"Time used:\", int(elapsed * 1000))\n    ```\n\n5. 运行\n\n    ```bash\n    python wordcount.py\n    ```\n","tags":["Docker","Hadoop","Spark"]},{"title":"Fedora重装记录","url":"/2019/05/17/Fedora重装记录/","content":"## 基本安装\n\n### Fedora安装\n\n1. 准备一个容量足够大的U盘，备份好U盘数据后，格式化U盘\n2. 进入Fedora官网获取U盘制作工具Fedora Media Writer\n3. 安装Fedora Media Writer，并使用其制作LiveUSB\n4. 重启电脑进入BIOS，打开从USB启动，重启后选择进入U盘中的Fedora\n5. 选择安装到本地，进行安装即可\n\n### 设置打开终端快捷键\n\n设置 => 设备 => Keyboard => + => {名称}自取，命令为`gnome-terminal`，{快捷键}自选\n\n### 更新系统并删除旧内核\n\n1. 更新系统：`sudo dnf update`\n2. 重启...\n3. 查看已安装的内核相关包：`rpm -qa | grep kernel`\n4. 查看当前使用的内核：`uname -r`\n5. 删除旧内核版本：`yum remove kernel-*-{要删除的版本}`\n6. 生成启动菜单：`grub2-mkconfig -o /boot/grub2/grub.cfg`\n\n## 常用软件安装\n\n### 安装chrome浏览器\n\n1. 安装chrome教程：[Install Google Chrome on Fedora 29/28](https://www.if-not-true-then-false.com/2010/install-google-chrome-with-yum-on-fedora-red-hat-rhel/)\n2. 添加dnf配置：\n\n    ```bash\n    sudo dnf install fedora-workstation-repositories\n    sudo dnf config-manager --set-enabled google-chrome\n    ```\n\n3. 安装chrome：`dnf install google-chrome-stable`\n4. [谷歌访问助手](https://ggfwzs.com/)\n\n### 安装VScode\n\n1. [官网教程](https://code.visualstudio.com/docs/setup/linux#_rhel-fedora-and-centos-based-distributions)\n2. 配置repo\n\n    ```bash\n    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\n    sudo sh -c 'echo -e \"[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/vscode.repo'\n    ```\n\n3. 安装\n\n    ```bash\n    dnf check-update\n    sudo dnf install code\n    ```\n\n4. 常用插件列表\n\n    |    **功能**    |                        **插件名**                         |\n    |:--------------:|:---------------------------------------------------------:|\n    | python语言支持 |                          python                           |\n    |   中文语言包   | Chinese (Simplified) Language Pack for Visual Studio Code |\n    |    括号配对    |                  Bracket Pair Colorizer                   |\n    |      主题      |                       One Dark Pro                        |\n    | python自动对齐 |                      Python-autopep8                      |\n    |    路径补全    |                     Path Intellisense                     |\n\n### 安装搜狗输入法\n\n1. 配置repo：`sudo dnf config-manager --add-repo=http://repo.fdzh.org/FZUG/FZUG.repo`\n2. 由于Fedora版本为29，fdzh还没有提供对应repo，可以**尝试**修改`FZUG.repo`：替换`$realese`为`26`或`27`\n3. 安装fctix：`dnf -y install fcitx`\n4. 安装搜狗拼音：`dnf -y install sogoupinyin`\n5. 配置fcitx，在`/etc/profile`中添加如下配置：\n\n    ```bash\n    #add for sogou input\n    export GTK_IM_MODULE=fcitx\n    export QT4_IM_MODULE=fcitx\n    export QT_IM_MODULE=fcitx\n    export XMODIFIER=@im=fcitx\n    ```\n\n6. 在gnome-tweak中将fcitx配置为开机自启动项\n7. 重启电脑\n\n### 安装python\n\n1. 安装virtualenvwrapper：`pip3 install --user virtualenvwrapper`\n2. 设置virtualenvwrapper的运行环境变量，编辑`~/.bashrc`或`~/.zshrc`，加入以下几行：\n\n    ```bash\n    VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\n    export WORKON_HOME='~/.virtualenvs'\n    source /usr/local/bin/virtualenvwrapper.sh # 路径视情况而定\n    ```\n\n3. 安装virutalenv：`sudo dnf install virtualenv`\n4. 创建虚拟环境：`mkvirtualenv [名称]`\n5. 切换虚拟环境：`workon [名称]`\n6. 离开虚拟环境：`deactivate`\n7. 删除虚拟环境：`rmvirtualenv [名称]`\n8. 常用包：`tensorflow`、`scikit-learn`、`matplotlib`、`autopep8`、`flake8`、`keras`\n\n### 其他软件\n\n1. **坚果云**：挺好用的网盘(网络**共享文件夹**)软件，安装见[官网]([https://link](https://www.jianguoyun.com/s/downloads/linux))\n2. **vivaldi浏览器**：**界面**要比chrome要好看，**自由度**较高，但是**flash安装**起来有点**难受**，[vivaldi官网](https://vivaldi.com/)提供rpm包\n3. **网易云音乐**：可以直接将官网的deb包解压后手动安装，教程参考[wenjinyu的博客](https://www.wenjinyu.me/zh/installing-netease-music-player-in-fedora-29/)\n\n## Fedora美化\n\n### gnome主题\n\n1. 安装优化工具`gnome-tweak-tool`：`sudo dnf install gnome-tweak-tool`\n2. [主题、图标获取地址](https://www.gnome-look.org/)\n3. 主题文件解压到`/usr/share/themes`，图标文件解压到`/usr/share/icons`\n4. OSX样式dock，软件商店搜索`dash-to-dock`下载即可\n\n### Oh My Zsh\n\n1. 以下步骤参考[zsh安装](https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH)\n2. 安装zsh，并修改为默认命令行：\n\n   ```bash\n   sudo dnf install zsh\n   chsh -s $(which zsh)\n   ```\n\n3. **重启命令行**或**注销**或**重启系统**，打开命令行，根据提示输入`0`\n4. 安装Oh My Zsh：`sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"`\n\n#### agnoster主题\n\n1. `vi ~/.zshrc`，修改`ZSH_THEME=\"agnoster\"`\n2. 安装powerline及字体：`sudo dnf install powerline powerline-fonts`\n3. **(可选)** 用户名机器名前缀太长：\n\n    ```bash\n    cd ~/.oh-my-zsh/themes\n    vi agnoster.zsh-theme\n\n    prompt_segment black default \"%(!.%{%F{yellow}%}.)%n@%m\"\n    => prompt_segment black default \"%(!.%{%F{yellow}%}.)%n\"\n    ```\n\n4. **(可选)** 修改文件路径前缀过长：\n\n    ```bash\n    cd ~/.oh-my-zsh/themes\n    vi agnoster.zsh-theme\n\n    prompt_segment blue $CURRENT_FG '%~'\n    => prompt_segment blue $CURRENT_FG '%c'\n    ```\n\n#### powerlevel9k主题\n\n以下步骤参考[dreamcats](https://dreamcats.github.io/2019/05/24/mac%E7%BB%88%E7%AB%AF-iterm2-zsh-oh-my-zsh/)的博客\n1. 获取主题：\n\n    ```bash\n    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n    ```\n\n2. `vi ~/.zshrc`，修改`ZSH_THEME=\"powerlevel9k/powerlevel9k\"`\n3. **(可选)** 主题配置\n\n    ```bash\n    # ==== Theme Settings ====\n    # PowerLevel9k\n    # 终端配色\n    export TERM=\"xterm-256color\"\n    # user name 注意之前的DEFALUT_USER 注释\n    POWERLEVEL9K_CONTEXT_TEMPLATE=\"{YOUR_USERNAME}\"\n    # 设置 oh-my-zsh powerlevel9k 主题左边元素显示\n    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir rbenv vcs)\n    # 设置 oh-my-zsh powerlevel9k 主题右边元素显示\n    POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(virtualenv status root_indicator background_jobs time)\n    #新起一行显示命令 (推荐！极其方便）\n    POWERLEVEL9K_PROMPT_ON_NEWLINE=true\n    #右侧状态栏与命令在同一行\n    POWERLEVEL9K_RPROMPT_ON_NEWLINE=true\n    #缩短目录层级\n    POWERLEVEL9K_SHORTEN_DIR_LENGTH=1\n    #缩短目录策略：隐藏上层目录中间的字\n    #POWERLEVEL9K_SHORTEN_STRATEGY=\"truncate_middle\"\n    #添加连接上下连接箭头更方便查看\n    POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=\"↱\"\n    POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=\"↳ \"\n    # 新的命令与上面的命令隔开一行\n    #POWERLEVEL9K_PROMPT_ADD_NEWLINE=true\n    # Git仓库状态的色彩指定\n    POWERLEVEL9K_VCS_CLEAN_FOREGROUND='blue'\n    POWERLEVEL9K_VCS_CLEAN_BACKGROUND='black'\n    POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND='yellow'\n    POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND='black'\n    POWERLEVEL9K_VCS_MODIFIED_FOREGROUND='red'\n    POWERLEVEL9K_VCS_MODIFIED_BACKGROUND='black'\n    ```\n\n#### 常用插件列表\n\n```bash\n(git extract z zsh-syntax-highlighting zsh-autosuggestions colorize)\n```\n\n```bash\n# zsh-syntax-highlighting\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n# zsh-autosuggestions\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n```\n","tags":["Fedora","Python"]}]